#!/usr/bin/env python3
#
# This file is part of turnkey-version
#
# turnkey-version is open source software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# turnkey-version was initially implemented as ad-hoc version detection
# for a system installed from a TurnKey appliance. Technically this is no
# longer needed as all appliances are marked with their versions. However
# it is still included as a convenience script for gathering the TurnKey
# version.

import sys
import argparse
from pathlib import Path

import sysversion

_TKL_VER = 'etc/turnkey_version'


class TurnkeyVersionError(Exception):
    pass


def main():
    parser = argparse.ArgumentParser(
            description='TurnKey Linux Version information')
    # rootfs provides backwards compatability
    parser.add_argument(
            'rootfs', type=str, nargs="?", default='/',
            help="Path to root filesystem. If not set, defaults to '/'.")
    file_or_str = parser.add_mutually_exclusive_group()
    file_or_str.add_argument(
            '-f', '--file', type=str, metavar="PATH/TO/FILE", default=_TKL_VER,
            help="Absolute path to file containing turnkey version"
                 " string. If not set; default: '{}'. NOTE: conflicts with"
                 " -s|--string.".format(_TKL_VER))
    file_or_str.add_argument(
            '-s', '--string', type=str, metavar="TKL_VER_STR",
            help="Process a string, instead of reading from a file."
                 "('turnkey-' prefix optional). NOTE: Conflicts with"
                 " -f|--file.")
    output = parser.add_argument_group(
            'Output options',
            description="Return space separated values. NOTE: If multiple"
            " elements returned, the order will always be: 'NAME VERSION"
            " CODENAME ARCH' (regardless of switch order).")
    output.add_argument('-n', '--name', action="store_true",
                        help="Return TurnKey appliance name. E.g. core.")
    output.add_argument('-t', '--tklversion', action="store_true",
                        help="Return TurnKey version number. E.g. 16.0.")
    output.add_argument('-c', '--codename', action="store_true",
                        help="Return relevant Debian codename. E.g. buster.")
    output.add_argument('-r', '--arch', action="store_true",
                        help="Return relevant architechture. E.g. amd64")
    output.add_argument('-a', '--all', action="store_true",
                        help="Return name, version, codename & arch."
                        " (Same as -ntcr).")
    args = parser.parse_args()

    if args.all and (
            args.name or args.tklversion or args.codename or args.arch):
        parser.error(
                "-a|--all and -n|--name / -t|--tklversion / -c|--codename"
                " / -r|--arch are mutually exclusive.")

    if args.string:
        turnkey_version = args.string
    else:
        # ensure that args.file is relative to args.rooffs
        turnkey_version = sysversion.get_turnkey_version(args.rootfs,
                                                         args.file.lstrip('/'))
    if not turnkey_version:
        raise TurnkeyVersionError(
                ("can't detect turnkey version - missing or invalid file '{}'."
                 ).format(Path(args.rootfs, args.file).resolve()))

    tkl_appver = []
    tkl_appver_cls = sysversion.AppVer(turnkey_version)
    if args.all:
        args.name = True
        args.tklversion = True
        args.codename = True
        args.arch = True
    if args.name:
        tkl_appver.append(tkl_appver_cls.appname)
    if args.tklversion:
        tkl_appver.append(tkl_appver_cls.tklver)
    if args.codename:
        tkl_appver.append(tkl_appver_cls.codename)
    if args.arch:
        tkl_appver.append(tkl_appver_cls.arch)
    if tkl_appver:
        print(' '.join(tkl_appver))
    else:
        print(turnkey_version)


if __name__ == "__main__":
    main()
